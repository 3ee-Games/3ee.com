import{S as Va,i as Xa,s as Za,C as ea,w as Ra,x as Ja,y as Ma,z as ei,A as Fa,q as Ha,o as Ua,B as Ya,a1 as Ga,e as o,t as r,k as h,c as n,a as l,h as p,d as t,m as d,b as m,g as s,G as a,E as ti}from"../../chunks/index-2a82a4a8.js";import{P as ai}from"../../chunks/_post-913f18eb.js";import{S as ii}from"../../chunks/SpaceLabTeaser-a5ec8b93.js";import"../../chunks/Player-9202028c.js";import"../../chunks/menuContextStore-c2e700c4.js";import"../../chunks/index-16dda89e.js";import"../../chunks/accountStore-3492c591.js";import"../../chunks/svgMapper-02b39f71.js";import"../../chunks/navigation-0e6511d1.js";import"../../chunks/singletons-d1fb5791.js";function si(z){let c,g,w,b,f,y,O,v,$,ne,Ze,et,tt,L,le,at,it,st,q,re,ot,nt,ke,C,lt,xe,D,rt,Ee,B,pt,Te,F,ht,Pe,G,pe,dt,Ie,N,ct,je,R,ft,Se,J,mt,Oe,x,E,he,ut,We,M,yt,Ae,H,gt,ze,U,wt,$e,T,de,bt,vt,ce,_t,Le,Y,kt,qe,K,xt,Ce,Q,fe,Et,De,V,Tt,Be,P,I,me,Pt,Fe,X,It,Ge,Z,jt,Ne,ee,St,Re,te,Ot,Je,W,Ka=`<code class="language-javascript"><span class="token comment">// create a new sprite</span>
<span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token punctuation">.</span><span class="token function">sprite</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'mySprite'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// resize the sprite's hitbox</span>
sprite<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`,Me,u,Wt,ue,At,zt,ye,$t,Lt,ge,qt,Ct,we,Dt,Bt,He,_,Ft,be,Gt,Nt,ve,Rt,Jt,Ue,j,S,_e,Mt,Ye,ae,Ht,Ke,ie,Ut,Qe,A,Ve;return A=new ii({}),{c(){c=o("p"),g=r("I\u2019m jamming on a flappy bird type game with my son called Flappy Jacob. We\u2019ve implemented a heart point system, powerups based on a random number generator, bosses that have set patterns and attacks, and a scoring system."),w=h(),b=o("p"),f=o("strong"),y=r("Powerups -  While you\u2019re jumping through the game, different power ups appear randomly:"),O=h(),v=o("ul"),$=o("li"),ne=o("strong"),Ze=r("Shield "),et=r(": Player can bust through the level blocks and reflect or be immune to damage from bosses."),tt=h(),L=o("li"),le=o("strong"),at=r("Feather "),it=r(": The player\u2019s movement and jumping has less gravity applied. Boss projectiles slow down in speed."),st=h(),q=o("li"),re=o("strong"),ot=r("Weight "),nt=r(": The player\u2019s movement and jumping has more gravity applied. Boss projectiles are reflected back to the boss."),ke=h(),C=o("p"),lt=r("The feather and weight offer a challenging experience the way they are designed. Sometimes a weight is extremely helpful when you need to drop fast to avoid knocking into the walls. The feather can be beneficial when you need to float or glide through the walls."),xe=h(),D=o("p"),rt=r("If you get one of these powerups at the wrong time, there is a chance you\u2019ll die. It does create some momentum in the game play but many times it equals death for the player."),Ee=h(),B=o("p"),pt=r("The shield is designed help the player along no matter what the situation is, allowing the player to destory walls."),Te=h(),F=o("p"),ht=r("While these are some decent designs for the game\u2019s mechanics, these powerups still need work. Instead of these powerups appearing randomly based on set percentages, we could design the powerups to be collected and the player can use them when they want to. This design is different but allows the player to make a decision instead of accepting what happens randomly."),Pe=h(),G=o("blockquote"),pe=o("p"),dt=r("As game designers, we shouldn\u2019t accept any mechanic into the game unless it\u2019s been tested, iterated on, and tested again and again."),Ie=h(),N=o("p"),ct=r("Using elements randomly has the possibility of being a good design and can be another way to add additional layers to your game play loop.  On the negative end, if we have a random mechanic causes the player to die unexpectedly, too often, the design will need more iteration. Do you need to redesign the whole mechanic? Can you get by with adding another layer to the loop? Experiment with different designs and ideas. Be positive the design is in scope and can be executed."),je=h(),R=o("p"),ft=r("Introduce a \u201Cmiracle\u201D type situation: the player would just wiggle through enough space to pass through the walls. Magical moments can spread stories outside of the confines of your game world. Maybe that\u2019s not enough or can be exploited. Some designs may need to be more clear. The player should be able to complete the levels or areas by learning from their mistakes.  If random powerups cause deaths - no amount of learning will help."),Se=h(),J=o("p"),mt=r("To solve these issues, let\u2019s look at allowing the player to choose which powerup to use at a given time.  We limit the amount of powerups that can be carried to three and allow to player to decide when to activate."),Oe=h(),x=o("h2"),E=o("a"),he=o("span"),ut=r("Balancing Act"),We=h(),M=o("p"),yt=r("Developing a boss encounter is incredibly enjoyable. Creating all the abilities the boss can perform and attempting to balance. Picturing a design in your head seems perfect at first, right? What could go wrong? Many times when designers are coming up with a boss fight, their mind fills in the blanks. When we see the boss in action, that\u2019s the flaws can be seen. While the boss encounter looked great in our minds and on paper, some of the gameplay wasn\u2019t thought out at all."),Ae=h(),H=o("p"),gt=r("For example: the bird boss that wildly kept healing over and over; when designing this fight, bird\u2019s tuning with casting its healing spell happened too often. The only strategy that works is to get a shield powerup and reflect the bird\u2019s projectiles back. As seen in the video, this gameplay creates a frustrating game play experience."),ze=h(),U=o("p"),wt=r("How do we fix this?  Let the player know the boss can heal."),$e=h(),T=o("ul"),de=o("li"),bt=r("The first few times the bird takes damage, it heals."),vt=h(),ce=o("li"),_t=r("Then when the bird is on its last life, it heals."),Le=h(),Y=o("p"),kt=r("Once those conditions are met, the boss never heals again."),qe=h(),K=o("p"),xt=r("Another example:"),Ce=h(),Q=o("ul"),fe=o("li"),Et=r("The healing spell has a cast timer and additional of the powerups can be used to interupt."),De=h(),V=o("p"),Tt=r("Instead of waiting for a shield to arrive - this allows for all the powerups to contribute to the player with defeating this boss."),Be=h(),P=o("h2"),I=o("a"),me=o("span"),Pt=r("Giving the Player Leeway"),Fe=h(),X=o("p"),It=r("As game developers, we strive to create a fun and engaging experience for our players. One aspect of game design that requires careful consideration is the balance between player freedom and difficulty. In particular, collision detection is an area where a fine balance must be struck."),Ge=h(),Z=o("p"),jt=r("While pixel perfect collision detection can have its place in certain games, in many cases it can limit player freedom and experimentation. Tight collision detection may require the player to execute the same jump or move with the same distance every time, leaving little room for creativity or mistakes. On the other hand, perfect collision detection can allow for experimentation, but can make the game too forgiving and reduce the sense of challenge."),Ne=h(),ee=o("p"),St=r("One example of balancing player freedom and difficulty is the popular game Flappy Jacob. In this game, the player controls a character who must navigate through a series of obstacles by jumping and avoiding collision. While the game has a simple concept, it can be challenging due to the tight collision detection. If the player\u2019s hair touches the wall, the player dies."),Re=h(),te=o("p"),Ot=r("Reducing the player\u2019s hitbox slightly can provide additional freedom without significantly reducing the game\u2019s difficulty. This change allows players to make small mistakes without being penalized too harshly, while still maintaining a sense of challenge. The player can still die if they are not paying attention, being reckless, or not taking their time."),Je=h(),W=o("pre"),Me=h(),u=o("p"),Wt=r("In this example, we create a new sprite at position "),ue=o("code"),At=r("(100, 100)"),zt=r(" with the key "),ye=o("code"),$t=r("'mySprite'"),Lt=r(". Then we use the "),ge=o("code"),qt=r("setSize()"),Ct=r(" method to resize the sprite\u2019s hitbox to a width and height of "),we=o("code"),Dt=r("50"),Bt=r(" pixels."),He=h(),_=o("p"),Ft=r("Note that the "),be=o("code"),Gt=r("setSize()"),Nt=r(" method sets the hitbox size in pixels, so the actual size of the hitbox will depend on the scale of the sprite and the size of the texture it is using. You can use the "),ve=o("code"),Rt=r("setScale()"),Jt=r(" method to adjust the scale of the sprite if needed."),Ue=h(),j=o("h2"),S=o("a"),_e=o("span"),Mt=r("Gameplay need time and iteration"),Ye=h(),ae=o("p"),Ht=r("It is important to note that balancing player freedom and difficulty requires time and iteration. A design that appears perfect in theory may not play out well in practice. It is essential to spend time at the drawing board, consider multiple possibilities, and play with different concepts of gameplay to uncover unforeseen possibilities that players will inevitably find."),Ke=h(),ie=o("p"),Ut=r("Through this process of iteration and testing, we can create games that strike the right balance between player freedom and difficulty, providing an enjoyable and engaging experience for players."),Qe=h(),Ra(A.$$.fragment),this.h()},l(e){c=n(e,"P",{});var i=l(c);g=p(i,"I\u2019m jamming on a flappy bird type game with my son called Flappy Jacob. We\u2019ve implemented a heart point system, powerups based on a random number generator, bosses that have set patterns and attacks, and a scoring system."),i.forEach(t),w=d(e),b=n(e,"P",{});var ta=l(b);f=n(ta,"STRONG",{});var aa=l(f);y=p(aa,"Powerups -  While you\u2019re jumping through the game, different power ups appear randomly:"),aa.forEach(t),ta.forEach(t),O=d(e),v=n(e,"UL",{});var se=l(v);$=n(se,"LI",{});var Yt=l($);ne=n(Yt,"STRONG",{});var ia=l(ne);Ze=p(ia,"Shield "),ia.forEach(t),et=p(Yt,": Player can bust through the level blocks and reflect or be immune to damage from bosses."),Yt.forEach(t),tt=d(se),L=n(se,"LI",{});var Kt=l(L);le=n(Kt,"STRONG",{});var sa=l(le);at=p(sa,"Feather "),sa.forEach(t),it=p(Kt,": The player\u2019s movement and jumping has less gravity applied. Boss projectiles slow down in speed."),Kt.forEach(t),st=d(se),q=n(se,"LI",{});var Qt=l(q);re=n(Qt,"STRONG",{});var oa=l(re);ot=p(oa,"Weight "),oa.forEach(t),nt=p(Qt,": The player\u2019s movement and jumping has more gravity applied. Boss projectiles are reflected back to the boss."),Qt.forEach(t),se.forEach(t),ke=d(e),C=n(e,"P",{});var na=l(C);lt=p(na,"The feather and weight offer a challenging experience the way they are designed. Sometimes a weight is extremely helpful when you need to drop fast to avoid knocking into the walls. The feather can be beneficial when you need to float or glide through the walls."),na.forEach(t),xe=d(e),D=n(e,"P",{});var la=l(D);rt=p(la,"If you get one of these powerups at the wrong time, there is a chance you\u2019ll die. It does create some momentum in the game play but many times it equals death for the player."),la.forEach(t),Ee=d(e),B=n(e,"P",{});var ra=l(B);pt=p(ra,"The shield is designed help the player along no matter what the situation is, allowing the player to destory walls."),ra.forEach(t),Te=d(e),F=n(e,"P",{});var pa=l(F);ht=p(pa,"While these are some decent designs for the game\u2019s mechanics, these powerups still need work. Instead of these powerups appearing randomly based on set percentages, we could design the powerups to be collected and the player can use them when they want to. This design is different but allows the player to make a decision instead of accepting what happens randomly."),pa.forEach(t),Pe=d(e),G=n(e,"BLOCKQUOTE",{});var ha=l(G);pe=n(ha,"P",{});var da=l(pe);dt=p(da,"As game designers, we shouldn\u2019t accept any mechanic into the game unless it\u2019s been tested, iterated on, and tested again and again."),da.forEach(t),ha.forEach(t),Ie=d(e),N=n(e,"P",{});var ca=l(N);ct=p(ca,"Using elements randomly has the possibility of being a good design and can be another way to add additional layers to your game play loop.  On the negative end, if we have a random mechanic causes the player to die unexpectedly, too often, the design will need more iteration. Do you need to redesign the whole mechanic? Can you get by with adding another layer to the loop? Experiment with different designs and ideas. Be positive the design is in scope and can be executed."),ca.forEach(t),je=d(e),R=n(e,"P",{});var fa=l(R);ft=p(fa,"Introduce a \u201Cmiracle\u201D type situation: the player would just wiggle through enough space to pass through the walls. Magical moments can spread stories outside of the confines of your game world. Maybe that\u2019s not enough or can be exploited. Some designs may need to be more clear. The player should be able to complete the levels or areas by learning from their mistakes.  If random powerups cause deaths - no amount of learning will help."),fa.forEach(t),Se=d(e),J=n(e,"P",{});var ma=l(J);mt=p(ma,"To solve these issues, let\u2019s look at allowing the player to choose which powerup to use at a given time.  We limit the amount of powerups that can be carried to three and allow to player to decide when to activate."),ma.forEach(t),Oe=d(e),x=n(e,"H2",{id:!0});var Vt=l(x);E=n(Vt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ua=l(E);he=n(ua,"SPAN",{class:!0}),l(he).forEach(t),ua.forEach(t),ut=p(Vt,"Balancing Act"),Vt.forEach(t),We=d(e),M=n(e,"P",{});var ya=l(M);yt=p(ya,"Developing a boss encounter is incredibly enjoyable. Creating all the abilities the boss can perform and attempting to balance. Picturing a design in your head seems perfect at first, right? What could go wrong? Many times when designers are coming up with a boss fight, their mind fills in the blanks. When we see the boss in action, that\u2019s the flaws can be seen. While the boss encounter looked great in our minds and on paper, some of the gameplay wasn\u2019t thought out at all."),ya.forEach(t),Ae=d(e),H=n(e,"P",{});var ga=l(H);gt=p(ga,"For example: the bird boss that wildly kept healing over and over; when designing this fight, bird\u2019s tuning with casting its healing spell happened too often. The only strategy that works is to get a shield powerup and reflect the bird\u2019s projectiles back. As seen in the video, this gameplay creates a frustrating game play experience."),ga.forEach(t),ze=d(e),U=n(e,"P",{});var wa=l(U);wt=p(wa,"How do we fix this?  Let the player know the boss can heal."),wa.forEach(t),$e=d(e),T=n(e,"UL",{});var Xe=l(T);de=n(Xe,"LI",{});var ba=l(de);bt=p(ba,"The first few times the bird takes damage, it heals."),ba.forEach(t),vt=d(Xe),ce=n(Xe,"LI",{});var va=l(ce);_t=p(va,"Then when the bird is on its last life, it heals."),va.forEach(t),Xe.forEach(t),Le=d(e),Y=n(e,"P",{});var _a=l(Y);kt=p(_a,"Once those conditions are met, the boss never heals again."),_a.forEach(t),qe=d(e),K=n(e,"P",{});var ka=l(K);xt=p(ka,"Another example:"),ka.forEach(t),Ce=d(e),Q=n(e,"UL",{});var xa=l(Q);fe=n(xa,"LI",{});var Ea=l(fe);Et=p(Ea,"The healing spell has a cast timer and additional of the powerups can be used to interupt."),Ea.forEach(t),xa.forEach(t),De=d(e),V=n(e,"P",{});var Ta=l(V);Tt=p(Ta,"Instead of waiting for a shield to arrive - this allows for all the powerups to contribute to the player with defeating this boss."),Ta.forEach(t),Be=d(e),P=n(e,"H2",{id:!0});var Xt=l(P);I=n(Xt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Pa=l(I);me=n(Pa,"SPAN",{class:!0}),l(me).forEach(t),Pa.forEach(t),Pt=p(Xt,"Giving the Player Leeway"),Xt.forEach(t),Fe=d(e),X=n(e,"P",{});var Ia=l(X);It=p(Ia,"As game developers, we strive to create a fun and engaging experience for our players. One aspect of game design that requires careful consideration is the balance between player freedom and difficulty. In particular, collision detection is an area where a fine balance must be struck."),Ia.forEach(t),Ge=d(e),Z=n(e,"P",{});var ja=l(Z);jt=p(ja,"While pixel perfect collision detection can have its place in certain games, in many cases it can limit player freedom and experimentation. Tight collision detection may require the player to execute the same jump or move with the same distance every time, leaving little room for creativity or mistakes. On the other hand, perfect collision detection can allow for experimentation, but can make the game too forgiving and reduce the sense of challenge."),ja.forEach(t),Ne=d(e),ee=n(e,"P",{});var Sa=l(ee);St=p(Sa,"One example of balancing player freedom and difficulty is the popular game Flappy Jacob. In this game, the player controls a character who must navigate through a series of obstacles by jumping and avoiding collision. While the game has a simple concept, it can be challenging due to the tight collision detection. If the player\u2019s hair touches the wall, the player dies."),Sa.forEach(t),Re=d(e),te=n(e,"P",{});var Oa=l(te);Ot=p(Oa,"Reducing the player\u2019s hitbox slightly can provide additional freedom without significantly reducing the game\u2019s difficulty. This change allows players to make small mistakes without being penalized too harshly, while still maintaining a sense of challenge. The player can still die if they are not paying attention, being reckless, or not taking their time."),Oa.forEach(t),Je=d(e),W=n(e,"PRE",{class:!0});var Qa=l(W);Qa.forEach(t),Me=d(e),u=n(e,"P",{});var k=l(u);Wt=p(k,"In this example, we create a new sprite at position "),ue=n(k,"CODE",{});var Wa=l(ue);At=p(Wa,"(100, 100)"),Wa.forEach(t),zt=p(k," with the key "),ye=n(k,"CODE",{});var Aa=l(ye);$t=p(Aa,"'mySprite'"),Aa.forEach(t),Lt=p(k,". Then we use the "),ge=n(k,"CODE",{});var za=l(ge);qt=p(za,"setSize()"),za.forEach(t),Ct=p(k," method to resize the sprite\u2019s hitbox to a width and height of "),we=n(k,"CODE",{});var $a=l(we);Dt=p($a,"50"),$a.forEach(t),Bt=p(k," pixels."),k.forEach(t),He=d(e),_=n(e,"P",{});var oe=l(_);Ft=p(oe,"Note that the "),be=n(oe,"CODE",{});var La=l(be);Gt=p(La,"setSize()"),La.forEach(t),Nt=p(oe," method sets the hitbox size in pixels, so the actual size of the hitbox will depend on the scale of the sprite and the size of the texture it is using. You can use the "),ve=n(oe,"CODE",{});var qa=l(ve);Rt=p(qa,"setScale()"),qa.forEach(t),Jt=p(oe," method to adjust the scale of the sprite if needed."),oe.forEach(t),Ue=d(e),j=n(e,"H2",{id:!0});var Zt=l(j);S=n(Zt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ca=l(S);_e=n(Ca,"SPAN",{class:!0}),l(_e).forEach(t),Ca.forEach(t),Mt=p(Zt,"Gameplay need time and iteration"),Zt.forEach(t),Ye=d(e),ae=n(e,"P",{});var Da=l(ae);Ht=p(Da,"It is important to note that balancing player freedom and difficulty requires time and iteration. A design that appears perfect in theory may not play out well in practice. It is essential to spend time at the drawing board, consider multiple possibilities, and play with different concepts of gameplay to uncover unforeseen possibilities that players will inevitably find."),Da.forEach(t),Ke=d(e),ie=n(e,"P",{});var Ba=l(ie);Ut=p(Ba,"Through this process of iteration and testing, we can create games that strike the right balance between player freedom and difficulty, providing an enjoyable and engaging experience for players."),Ba.forEach(t),Qe=d(e),Ja(A.$$.fragment,e),this.h()},h(){m(he,"class","icon icon-link"),m(E,"aria-hidden","true"),m(E,"tabindex","-1"),m(E,"href","#balancing-act"),m(x,"id","balancing-act"),m(me,"class","icon icon-link"),m(I,"aria-hidden","true"),m(I,"tabindex","-1"),m(I,"href","#giving-the-player-leeway"),m(P,"id","giving-the-player-leeway"),m(W,"class","language-javascript"),m(_e,"class","icon icon-link"),m(S,"aria-hidden","true"),m(S,"tabindex","-1"),m(S,"href","#gameplay-need-time-and-iteration"),m(j,"id","gameplay-need-time-and-iteration")},m(e,i){s(e,c,i),a(c,g),s(e,w,i),s(e,b,i),a(b,f),a(f,y),s(e,O,i),s(e,v,i),a(v,$),a($,ne),a(ne,Ze),a($,et),a(v,tt),a(v,L),a(L,le),a(le,at),a(L,it),a(v,st),a(v,q),a(q,re),a(re,ot),a(q,nt),s(e,ke,i),s(e,C,i),a(C,lt),s(e,xe,i),s(e,D,i),a(D,rt),s(e,Ee,i),s(e,B,i),a(B,pt),s(e,Te,i),s(e,F,i),a(F,ht),s(e,Pe,i),s(e,G,i),a(G,pe),a(pe,dt),s(e,Ie,i),s(e,N,i),a(N,ct),s(e,je,i),s(e,R,i),a(R,ft),s(e,Se,i),s(e,J,i),a(J,mt),s(e,Oe,i),s(e,x,i),a(x,E),a(E,he),a(x,ut),s(e,We,i),s(e,M,i),a(M,yt),s(e,Ae,i),s(e,H,i),a(H,gt),s(e,ze,i),s(e,U,i),a(U,wt),s(e,$e,i),s(e,T,i),a(T,de),a(de,bt),a(T,vt),a(T,ce),a(ce,_t),s(e,Le,i),s(e,Y,i),a(Y,kt),s(e,qe,i),s(e,K,i),a(K,xt),s(e,Ce,i),s(e,Q,i),a(Q,fe),a(fe,Et),s(e,De,i),s(e,V,i),a(V,Tt),s(e,Be,i),s(e,P,i),a(P,I),a(I,me),a(P,Pt),s(e,Fe,i),s(e,X,i),a(X,It),s(e,Ge,i),s(e,Z,i),a(Z,jt),s(e,Ne,i),s(e,ee,i),a(ee,St),s(e,Re,i),s(e,te,i),a(te,Ot),s(e,Je,i),s(e,W,i),W.innerHTML=Ka,s(e,Me,i),s(e,u,i),a(u,Wt),a(u,ue),a(ue,At),a(u,zt),a(u,ye),a(ye,$t),a(u,Lt),a(u,ge),a(ge,qt),a(u,Ct),a(u,we),a(we,Dt),a(u,Bt),s(e,He,i),s(e,_,i),a(_,Ft),a(_,be),a(be,Gt),a(_,Nt),a(_,ve),a(ve,Rt),a(_,Jt),s(e,Ue,i),s(e,j,i),a(j,S),a(S,_e),a(j,Mt),s(e,Ye,i),s(e,ae,i),a(ae,Ht),s(e,Ke,i),s(e,ie,i),a(ie,Ut),s(e,Qe,i),Ma(A,e,i),Ve=!0},p:ti,i(e){Ve||(Ha(A.$$.fragment,e),Ve=!0)},o(e){Ua(A.$$.fragment,e),Ve=!1},d(e){e&&t(c),e&&t(w),e&&t(b),e&&t(O),e&&t(v),e&&t(ke),e&&t(C),e&&t(xe),e&&t(D),e&&t(Ee),e&&t(B),e&&t(Te),e&&t(F),e&&t(Pe),e&&t(G),e&&t(Ie),e&&t(N),e&&t(je),e&&t(R),e&&t(Se),e&&t(J),e&&t(Oe),e&&t(x),e&&t(We),e&&t(M),e&&t(Ae),e&&t(H),e&&t(ze),e&&t(U),e&&t($e),e&&t(T),e&&t(Le),e&&t(Y),e&&t(qe),e&&t(K),e&&t(Ce),e&&t(Q),e&&t(De),e&&t(V),e&&t(Be),e&&t(P),e&&t(Fe),e&&t(X),e&&t(Ge),e&&t(Z),e&&t(Ne),e&&t(ee),e&&t(Re),e&&t(te),e&&t(Je),e&&t(W),e&&t(Me),e&&t(u),e&&t(He),e&&t(_),e&&t(Ue),e&&t(j),e&&t(Ye),e&&t(ae),e&&t(Ke),e&&t(ie),e&&t(Qe),Ya(A,e)}}}function oi(z){let c,g;const w=[z[0],Na];let b={$$slots:{default:[si]},$$scope:{ctx:z}};for(let f=0;f<w.length;f+=1)b=ea(b,w[f]);return c=new ai({props:b}),{c(){Ra(c.$$.fragment)},l(f){Ja(c.$$.fragment,f)},m(f,y){Ma(c,f,y),g=!0},p(f,[y]){const O=y&1?ei(w,[y&1&&Fa(f[0]),y&0&&Fa(Na)]):{};y&2&&(O.$$scope={dirty:y,ctx:f}),c.$set(O)},i(f){g||(Ha(c.$$.fragment,f),g=!0)},o(f){Ua(c.$$.fragment,f),g=!1},d(f){Ya(c,f)}}}const Na={title:"Flappy Jacob Prototype",date:"2020-08-18",modifiedDate:"2023-03-30 15:50:00",categories:["game development","phaser"],svg:"Balance",seoImage:"https://res.cloudinary.com/dxgyuy0iu/image/upload/v1703435222/img/flapper-poster.webp",shortDescription:"Jamming on a flappy bird type game with my son called Flappy Jacob. We've implemented a heart point system, powerups based on a random number generator, bosses that have set patterns and attacks, and a scoring system.",keywords:["game jams","game development"],author:"Ryan Sadwick",videos:[{width:"100%",height:600,controls:!0,poster:"https://res.cloudinary.com/dxgyuy0iu/image/upload/v1703435222/img/flapper-poster.webp",srcs:[{src:"https://res.cloudinary.com/dxgyuy0iu/video/upload/v1703435082/img/flapper-video.mp4",type:"video/mp4"}]}]};function ni(z,c,g){return z.$$set=w=>{g(0,c=ea(ea({},c),Ga(w)))},c=Ga(c),[c]}class gi extends Va{constructor(c){super(),Xa(this,c,ni,oi,Za,{})}}export{gi as default,Na as metadata};
