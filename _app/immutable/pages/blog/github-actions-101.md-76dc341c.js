import{S as al,i as tl,s as el,C as ko,w as Hp,x as Lp,y as xp,z as ol,A as Op,q as Cp,o as Ip,B as $p,a1 as Pp,e as t,t as r,k as u,c as e,a as o,h as i,d as n,m as c,b as k,g as l,G as a,E as pl}from"../../chunks/index-2a82a4a8.js";import{P as ll}from"../../chunks/_post-dca79525.js";import{I as rl}from"../../chunks/IssueTracker-2167ad18.js";import"../../chunks/Player-9202028c.js";import"../../chunks/menuContextStore-c2e700c4.js";import"../../chunks/index-16dda89e.js";function il(ms){let f,b,m,ss,d,y,A,at,Mn,h,Ks,Ys,tt,et,Xs,Zs,ot,pt,Vs,sn,lt,rt,nn,an,it,ut,tn,en,ct,zn,Jn,Kn,O,P,on,kt,Yn,bs,ft,Xn,_s,pn,dt,Zn,_,Es,ln,ht,yt,mt,vs,rn,bt,_t,Et,ws,un,vt,wt,Vn,ns,cn,gt,Tt,sa,na,aa,R,H,kn,At,ta,gs,St,ea,L,x,fn,Gt,oa,E,as,Nt,dn,Ot,Pt,Rt,C,Ht,hn,Lt,xt,S,Ts,yn,Ct,It,$t,As,mn,Ut,jt,qt,Ss,bn,Dt,Qt,Wt,_n,Bt,pa,I,$,En,Ft,la,v,ts,Mt,vn,zt,Jt,Kt,G,Yt,wn,Xt,Zt,gn,Vt,se,ne,Tn,ae,ra,es,Up='<code class="language-yaml">TOKEN=$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.PAT_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code>',ia,ua,ca,U,j,An,te,ka,Gs,ee,fa,os,jp=`<code class="language-undefined">.github/workflows
    - api-issue-tracker.yml
    - hoa-issue-tracker.yml
    - website-issue-tracker.yml

public
    - api-issue-count.json
    - frontend-issue-count.json
    - hoa-issue-count.json</code>`,da,q,D,Sn,oe,ha,ps,qp=`<code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Track 3ee API Resolved Issues

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">'0 0 * * *'</span>  <span class="token comment">#Runs daily at midnight</span>
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>  <span class="token comment">#Manual trigger</span>

<span class="token key atrule">permissions</span><span class="token punctuation">:</span>
  <span class="token key atrule">contents</span><span class="token punctuation">:</span> write
  <span class="token key atrule">issues</span><span class="token punctuation">:</span> read

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">track-issues</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3
        
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Fetch All Closed Issues (GraphQL)
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          TOKEN=$&#123;&#123; secrets.PAT_TOKEN &#125;&#125;
          OWNER="3ee-Games"
          REPO="3ee-api"</span>

          fetch_issues() <span class="token punctuation">&#123;</span>
            LABEL=$1
            END_CURSOR=$2

            QUERY="<span class="token punctuation">&#123;</span><span class="token key atrule">"query"</span><span class="token punctuation">:</span> "query <span class="token punctuation">&#123;</span>
              <span class="token key atrule">repository(owner</span><span class="token punctuation">:</span> \\"$OWNER\\"<span class="token punctuation">,</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> \\"$REPO\\") <span class="token punctuation">&#123;</span>
                <span class="token key atrule">issues(first</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\\"$LABEL\\"<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">states</span><span class="token punctuation">:</span> CLOSED<span class="token punctuation">,</span> <span class="token key atrule">after</span><span class="token punctuation">:</span> $END_CURSOR) <span class="token punctuation">&#123;</span>
                  totalCount
                  pageInfo <span class="token punctuation">&#123;</span>
                    endCursor
                    hasNextPage
                  <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
              <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>"<span class="token punctuation">&#125;</span>"
            
            echo $QUERY
          <span class="token punctuation">&#125;</span>

          count_issues_by_label() <span class="token punctuation">&#123;</span>
            LABEL=$1
            TOTAL_COUNT=0
            END_CURSOR="null"

            while <span class="token punctuation">:</span>; do
              QUERY=$(fetch_issues "$LABEL" "$END_CURSOR")

              <span class="token key atrule">RESPONSE=$(curl -s -X POST -H "Authorization</span><span class="token punctuation">:</span> <span class="token key atrule">Bearer $TOKEN" -H "Content-Type</span><span class="token punctuation">:</span> application/json" <span class="token punctuation">-</span>d "$QUERY" https<span class="token punctuation">:</span>//api.github.com/graphql)

              BUG_COUNT=$(echo $RESPONSE <span class="token punctuation">|</span> jq '.data.repository.issues.totalCount')
              TOTAL_COUNT=$((TOTAL_COUNT + BUG_COUNT))

              HAS_NEXT_PAGE=$(echo $RESPONSE <span class="token punctuation">|</span> jq '.data.repository.issues.pageInfo.hasNextPage')
              END_CURSOR=$(echo $RESPONSE <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.data.repository.issues.pageInfo.endCursor')

              if <span class="token punctuation">[</span> "$HAS_NEXT_PAGE" <span class="token tag">!=</span> "true" <span class="token punctuation">]</span>; then
                break
              fi
            done

            echo "$TOTAL_COUNT"
          <span class="token punctuation">&#125;</span>

          BUG_COUNT=$(count_issues_by_label "bug")
          DOC_COUNT=$(count_issues_by_label "documentation")
          ENHANCEMENT_COUNT=$(count_issues_by_label "enhancement")

          mkdir <span class="token punctuation">-</span>p public
          echo "<span class="token punctuation">&#123;</span>
            <span class="token key atrule">"resolved_bugs"</span><span class="token punctuation">:</span> $BUG_COUNT<span class="token punctuation">,</span>
            <span class="token key atrule">"resolved_documentation"</span><span class="token punctuation">:</span> $DOC_COUNT<span class="token punctuation">,</span>
            <span class="token key atrule">"resolved_enhancements"</span><span class="token punctuation">:</span> $ENHANCEMENT_COUNT
          <span class="token punctuation">&#125;</span>" <span class="token punctuation">></span> public/api<span class="token punctuation">-</span>issue<span class="token punctuation">-</span>count.json

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Commit and Push Issue Counts
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add public/api-issue-count.json
          git commit -m "Update issue counts" || echo "No changes to commit"
          git push</span></code>`,ya,ma,ba,Q,W,Gn,pe,_a,B,le,Nn,re,ie,Ea,w,Ns,On,ue,ce,ke,g,Pn,fe,de,Rn,he,ye,Hn,me,be,_e,Os,Ln,Ee,ve,va,Ps,we,wa,F,M,xn,ge,ga,Rs,Te,Ta,Hs,Cn,Ae,Aa,ls,Dp=`<code class="language-graphql">
<span class="token punctuation">&#123;</span>
  <span class="token property-query">repository</span><span class="token punctuation">(</span><span class="token attr-name">owner</span><span class="token punctuation">:</span> <span class="token string">"3ee-Games"</span><span class="token punctuation">,</span> <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"3ee-api"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token property-query">issues</span><span class="token punctuation">(</span><span class="token attr-name">first</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token attr-name">labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"bug"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token attr-name">states</span><span class="token punctuation">:</span> <span class="token constant">CLOSED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token object">edges</span> <span class="token punctuation">&#123;</span>
        <span class="token object">node</span> <span class="token punctuation">&#123;</span>
          <span class="token property">title</span>
          <span class="token property">state</span>
          <span class="token property-query">labels</span><span class="token punctuation">(</span><span class="token attr-name">first</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token object">edges</span> <span class="token punctuation">&#123;</span>
              <span class="token object">node</span> <span class="token punctuation">&#123;</span>
                <span class="token property">name</span>
              <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Sa,Ls,In,Se,Ga,rs,Qp=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"issues"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"edges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span>
            <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Fix login bug"</span><span class="token punctuation">,</span>
              <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"CLOSED"</span><span class="token punctuation">,</span>
              <span class="token property">"labels"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token property">"edges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token punctuation">&#123;</span> <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"bug"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
                <span class="token punctuation">]</span>
              <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>
            <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Resolve API timeout"</span><span class="token punctuation">,</span>
              <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"CLOSED"</span><span class="token punctuation">,</span>
              <span class="token property">"labels"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token property">"edges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token punctuation">&#123;</span> <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"bug"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                  <span class="token punctuation">&#123;</span> <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"urgent"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
                <span class="token punctuation">]</span>
              <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Na,z,J,$n,Ge,Oa,xs,Ne,Pa,Cs,Un,Oe,Ra,is,Wp=`<code class="language-bash"><span class="token function">curl</span> -s -H <span class="token string">"Authorization: token <span class="token variable">$TOKEN</span>"</span> <span class="token punctuation"></span>
  <span class="token string">"https://api.github.com/repos/3ee-Games/3ee-api/issues?state=closed&amp;labels=bug"</span>
</code>`,Ha,Is,jn,Pe,La,us,Bp=`<code class="language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">123456789</span><span class="token punctuation">,</span>
    <span class="token property">"node_id"</span><span class="token operator">:</span> <span class="token string">"MDU6SXNzdWUxMjM0NTY3ODk="</span><span class="token punctuation">,</span>
    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Fix login bug"</span><span class="token punctuation">,</span>
    <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"closed"</span><span class="token punctuation">,</span>
    <span class="token property">"labels"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">987654321</span><span class="token punctuation">,</span>
        <span class="token property">"node_id"</span><span class="token operator">:</span> <span class="token string">"MDU6TGFiZWw5ODc2NTQzMjE="</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"bug"</span><span class="token punctuation">,</span>
        <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"d73a4a"</span><span class="token punctuation">,</span>
        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Something isn't working"</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"locked"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token property">"created_at"</span><span class="token operator">:</span> <span class="token string">"2023-01-01T12:00:00Z"</span><span class="token punctuation">,</span>
    <span class="token property">"updated_at"</span><span class="token operator">:</span> <span class="token string">"2023-01-05T15:30:00Z"</span><span class="token punctuation">,</span>
    <span class="token property">"closed_at"</span><span class="token operator">:</span> <span class="token string">"2023-01-05T15:30:00Z"</span><span class="token punctuation">,</span>
    <span class="token property">"author_association"</span><span class="token operator">:</span> <span class="token string">"CONTRIBUTOR"</span><span class="token punctuation">,</span>
    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"Steps to reproduce the issue..."</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span></code>`,xa,$s,Re,Ca,Ia,$a,K,Y,qn,He,Ua,Us,Le,ja,cs,Fp=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"resolved_bugs"</span><span class="token operator">:</span> <span class="token number">41</span><span class="token punctuation">,</span>
  <span class="token property">"resolved_documentation"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
  <span class="token property">"resolved_enhancements"</span><span class="token operator">:</span> <span class="token number">57</span>
<span class="token punctuation">&#125;</span></code>`,qa,N,xe,Dn,Ce,Ie,ks,$e,Da,js,Ue,Qa,fs,Mp=`<code class="language-javascript">
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchIssueData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://raw.githubusercontent.com/3ee-Games/github-actions/refs/heads/main/public/api-issue-count.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed to fetch: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Resolved Bugs:'</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>resolved_bugs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Resolved Documentation Issues:'</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>resolved_documentation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Resolved Enhancements:'</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>resolved_enhancements<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error fetching issue data:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">fetchIssueData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Wa,qs,Qn,je,Ba,Ds,qe,Fa,ds,Ma,za,Ja,X,Z,Wn,De,Ka,Qs,Qe,Ya,V,We,hs,Be,Fe,Xa;return ds=new rl({}),{c(){f=t("p"),b=r("This blog post walks through how we use "),m=t("strong"),ss=r("GitHub Actions"),d=r(" to automate fetching completed issues by label: bug counts, enhancements, and documentation updates."),y=u(),A=t("p"),at=r("In this guide, you\u2019ll learn:"),Mn=u(),h=t("ul"),Ks=t("li"),Ys=t("strong"),tt=r("What GitHub Actions are and how to set them up"),et=u(),Xs=t("li"),Zs=t("strong"),ot=r("How to securely reference PAT tokens to access private repo data"),pt=u(),Vs=t("li"),sn=t("strong"),lt=r("Breaking down each part of a GitHub Action workflow"),rt=u(),nn=t("li"),an=t("strong"),it=r("Why we use GraphQL for fetching data"),ut=u(),tn=t("li"),en=t("strong"),ct=r("How to output JSON for frontend use"),zn=u(),Jn=t("hr"),Kn=u(),O=t("h2"),P=t("a"),on=t("span"),kt=r("What are GitHub Actions?"),Yn=u(),bs=t("p"),ft=r("GitHub Actions are automation workflows you can trigger directly in your GitHub repositories. Whether you want to run tests, deploy code, or automate administrative tasks (like tracking issues), Actions make it easy to build and deploy code automatically."),Xn=u(),_s=t("p"),pn=t("strong"),dt=r("How it Works:"),Zn=u(),_=t("ul"),Es=t("li"),ln=t("strong"),ht=r("Event-driven:"),yt=r(" Actions trigger on events (like pushing to a repo or opening an issue)."),mt=u(),vs=t("li"),rn=t("strong"),bt=r("Flexible:"),_t=r(" You can run custom scripts or use pre-built actions from the GitHub Marketplace."),Et=u(),ws=t("li"),un=t("strong"),vt=r("Scalable:"),wt=r(" Actions run on virtual environments (Ubuntu)."),Vn=u(),ns=t("p"),cn=t("strong"),gt=r("For our issue tracker,"),Tt=r(" we use GitHub Actions to fetch the latest bug/enhancement data daily and store it in a JSON file that the frontend reads."),sa=u(),na=t("hr"),aa=u(),R=t("h2"),H=t("a"),kn=t("span"),At=r("Setting Up GitHub Personal Access Tokens (PAT)"),ta=u(),gs=t("p"),St=r("Since our repositories are private, we need a secure way to fetch issue data. GitHub Personal Access Tokens (PAT) grant fine-grained access to your repositories."),ea=u(),L=t("h3"),x=t("a"),fn=t("span"),Gt=r("Steps to Generate a PAT:"),oa=u(),E=t("ol"),as=t("li"),Nt=r("Go to "),dn=t("strong"),Ot=r("Settings > Developer Settings > Personal Access Tokens"),Pt=r(" on GitHub."),Rt=u(),C=t("li"),Ht=r("Click "),hn=t("strong"),Lt=r("Generate new token"),xt=r(" and select the following scopes:  "),S=t("ul"),Ts=t("li"),yn=t("code"),Ct=r("repo"),It=r(" \u2013 Full control of private repositories"),$t=u(),As=t("li"),mn=t("code"),Ut=r("read:org"),jt=r(" \u2013 Read organization-level information"),qt=u(),Ss=t("li"),bn=t("code"),Dt=r("issues"),Qt=r(" \u2013 Read issues data"),Wt=u(),_n=t("li"),Bt=r("Copy the token \u2013 this is your key for API access."),pa=u(),I=t("h3"),$=t("a"),En=t("span"),Ft=r("Storing and Referencing the PAT Securely:"),la=u(),v=t("ul"),ts=t("li"),Mt=r("In your repository, go to "),vn=t("strong"),zt=r("Settings > Secrets and Variables > Actions"),Jt=r("."),Kt=u(),G=t("li"),Yt=r("Click "),wn=t("strong"),Xt=r("New Repository Secret"),Zt=r(" and name it "),gn=t("code"),Vt=r("PAT_TOKEN"),se=r("."),ne=u(),Tn=t("li"),ae=r("In your GitHub Actions workflow, reference the secret like this:"),ra=u(),es=t("pre"),ia=u(),ua=t("hr"),ca=u(),U=t("h2"),j=t("a"),An=t("span"),te=r("Breaking Down the GitHub Action Workflow"),ka=u(),Gs=t("p"),ee=r("Now that our token is set up, let\u2019s break down the GitHub Action workflow we use to track issues. Each repository (API, game, and website) has a separate workflow, outputting to its own JSON file."),fa=u(),os=t("pre"),da=u(),q=t("h3"),D=t("a"),Sn=t("span"),oe=r("Example Workflow"),ha=u(),ps=t("pre"),ya=u(),ma=t("hr"),ba=u(),Q=t("h2"),W=t("a"),Gn=t("span"),pe=r("Why Use GraphQL?"),_a=u(),B=t("p"),le=r("GitHub\u2019s REST API can be limiting when fetching large amounts of data. GraphQL allows us to request "),Nn=t("strong"),re=r("exactly the data we need"),ie=r(" in a single query, reducing the number of API calls."),Ea=u(),w=t("ul"),Ns=t("li"),On=t("strong"),ue=r("Efficiency:"),ce=r(" Fetches all labeled issues in one request."),ke=u(),g=t("li"),Pn=t("strong"),fe=r("Pagination:"),de=r(" Handles pagination gracefully using "),Rn=t("code"),he=r("endCursor"),ye=r(" and "),Hn=t("code"),me=r("hasNextPage"),be=r("."),_e=u(),Os=t("li"),Ln=t("strong"),Ee=r("Customizable:"),ve=r(" We can adjust queries dynamically by passing labels or states."),va=u(),Ps=t("p"),we=r("In the next section, I\u2019ll illustrate the difference between using GraphQL and REST, from the query to the response and how we can use that response to build a frontend component."),wa=u(),F=t("h3"),M=t("a"),xn=t("span"),ge=r("GraphQL returning exactly what we want"),ga=u(),Rs=t("p"),Te=r("GraphQL returns only the requested fields (title, state, and labels). No unnecessary data is retrieved."),Ta=u(),Hs=t("p"),Cn=t("strong"),Ae=r("Query:"),Aa=u(),ls=t("pre"),Sa=u(),Ls=t("p"),In=t("strong"),Se=r("Output:"),Ga=u(),rs=t("pre"),Na=u(),z=t("h3"),J=t("a"),$n=t("span"),Ge=r("REST returning everything"),Oa=u(),xs=t("p"),Ne=r("REST returns everything by default (user info, timestamps, full issue body, comments, etc.), even if you don\u2019t need it."),Pa=u(),Cs=t("p"),Un=t("strong"),Oe=r("Query:"),Ra=u(),is=t("pre"),Ha=u(),Is=t("p"),jn=t("strong"),Pe=r("Output:"),La=u(),us=t("pre"),xa=u(),$s=t("p"),Re=r("This is why GraphQL is more efficient for fetching exactly what you need, reducing payload size and improving performance."),Ca=u(),Ia=t("hr"),$a=u(),K=t("h2"),Y=t("a"),qn=t("span"),He=r("Outputting to JSON for Frontend Use"),Ua=u(),Us=t("p"),Le=r("Each time the action runs, it generates a JSON file that looks like this:"),ja=u(),cs=t("pre"),qa=u(),N=t("p"),xe=r("These files live in the "),Dn=t("code"),Ce=r("public"),Ie=r(" folder and are read by frontend components to display live issue counts: "),ks=t("a"),$e=r("https://github.com/3ee-Games/github-actions/tree/main/public"),Da=u(),js=t("p"),Ue=r("We can build a simple component that makes a call to those json files the actions created.  In this example, we\u2019ll log the response:"),Qa=u(),fs=t("pre"),Wa=u(),qs=t("blockquote"),Qn=t("p"),je=r("You can copy and paste this code in your browser\u2019s console and it will return a json object."),Ba=u(),Ds=t("p"),qe=r("The next step is to build out a frontend component using html and css. Below is the component that was built and used on the homepage of this website:"),Fa=u(),Hp(ds.$$.fragment),Ma=u(),za=t("hr"),Ja=u(),X=t("h3"),Z=t("a"),Wn=t("span"),De=r("Final Thoughts"),Ka=u(),Qs=t("p"),Qe=r("GitHub Actions provide a powerful way to automate issue tracking and boost transparency. By integrating GraphQL and automating with cron jobs, we can stay organized and communicate our progress with players in real-time."),Ya=u(),V=t("p"),We=r("Ready to set up your own tracker? "),hs=t("a"),Be=r("Fork our repo"),Fe=r(" and start automating your project."),this.h()},l(s){f=e(s,"P",{});var p=o(f);b=i(p,"This blog post walks through how we use "),m=e(p,"STRONG",{});var fo=o(m);ss=i(fo,"GitHub Actions"),fo.forEach(n),d=i(p," to automate fetching completed issues by label: bug counts, enhancements, and documentation updates."),p.forEach(n),y=c(s),A=e(s,"P",{});var ho=o(A);at=i(ho,"In this guide, you\u2019ll learn:"),ho.forEach(n),Mn=c(s),h=e(s,"UL",{});var T=o(h);Ks=e(T,"LI",{});var yo=o(Ks);Ys=e(yo,"STRONG",{});var mo=o(Ys);tt=i(mo,"What GitHub Actions are and how to set them up"),mo.forEach(n),yo.forEach(n),et=c(T),Xs=e(T,"LI",{});var bo=o(Xs);Zs=e(bo,"STRONG",{});var _o=o(Zs);ot=i(_o,"How to securely reference PAT tokens to access private repo data"),_o.forEach(n),bo.forEach(n),pt=c(T),Vs=e(T,"LI",{});var Eo=o(Vs);sn=e(Eo,"STRONG",{});var vo=o(sn);lt=i(vo,"Breaking down each part of a GitHub Action workflow"),vo.forEach(n),Eo.forEach(n),rt=c(T),nn=e(T,"LI",{});var wo=o(nn);an=e(wo,"STRONG",{});var go=o(an);it=i(go,"Why we use GraphQL for fetching data"),go.forEach(n),wo.forEach(n),ut=c(T),tn=e(T,"LI",{});var To=o(tn);en=e(To,"STRONG",{});var Ao=o(en);ct=i(Ao,"How to output JSON for frontend use"),Ao.forEach(n),To.forEach(n),T.forEach(n),zn=c(s),Jn=e(s,"HR",{}),Kn=c(s),O=e(s,"H2",{id:!0});var Me=o(O);P=e(Me,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var So=o(P);on=e(So,"SPAN",{class:!0}),o(on).forEach(n),So.forEach(n),kt=i(Me,"What are GitHub Actions?"),Me.forEach(n),Yn=c(s),bs=e(s,"P",{});var Go=o(bs);ft=i(Go,"GitHub Actions are automation workflows you can trigger directly in your GitHub repositories. Whether you want to run tests, deploy code, or automate administrative tasks (like tracking issues), Actions make it easy to build and deploy code automatically."),Go.forEach(n),Xn=c(s),_s=e(s,"P",{});var No=o(_s);pn=e(No,"STRONG",{});var Oo=o(pn);dt=i(Oo,"How it Works:"),Oo.forEach(n),No.forEach(n),Zn=c(s),_=e(s,"UL",{});var Ws=o(_);Es=e(Ws,"LI",{});var ze=o(Es);ln=e(ze,"STRONG",{});var Po=o(ln);ht=i(Po,"Event-driven:"),Po.forEach(n),yt=i(ze," Actions trigger on events (like pushing to a repo or opening an issue)."),ze.forEach(n),mt=c(Ws),vs=e(Ws,"LI",{});var Je=o(vs);rn=e(Je,"STRONG",{});var Ro=o(rn);bt=i(Ro,"Flexible:"),Ro.forEach(n),_t=i(Je," You can run custom scripts or use pre-built actions from the GitHub Marketplace."),Je.forEach(n),Et=c(Ws),ws=e(Ws,"LI",{});var Ke=o(ws);un=e(Ke,"STRONG",{});var Ho=o(un);vt=i(Ho,"Scalable:"),Ho.forEach(n),wt=i(Ke," Actions run on virtual environments (Ubuntu)."),Ke.forEach(n),Ws.forEach(n),Vn=c(s),ns=e(s,"P",{});var Ye=o(ns);cn=e(Ye,"STRONG",{});var Lo=o(cn);gt=i(Lo,"For our issue tracker,"),Lo.forEach(n),Tt=i(Ye," we use GitHub Actions to fetch the latest bug/enhancement data daily and store it in a JSON file that the frontend reads."),Ye.forEach(n),sa=c(s),na=e(s,"HR",{}),aa=c(s),R=e(s,"H2",{id:!0});var Xe=o(R);H=e(Xe,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xo=o(H);kn=e(xo,"SPAN",{class:!0}),o(kn).forEach(n),xo.forEach(n),At=i(Xe,"Setting Up GitHub Personal Access Tokens (PAT)"),Xe.forEach(n),ta=c(s),gs=e(s,"P",{});var Co=o(gs);St=i(Co,"Since our repositories are private, we need a secure way to fetch issue data. GitHub Personal Access Tokens (PAT) grant fine-grained access to your repositories."),Co.forEach(n),ea=c(s),L=e(s,"H3",{id:!0});var Ze=o(L);x=e(Ze,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Io=o(x);fn=e(Io,"SPAN",{class:!0}),o(fn).forEach(n),Io.forEach(n),Gt=i(Ze,"Steps to Generate a PAT:"),Ze.forEach(n),oa=c(s),E=e(s,"OL",{});var Bs=o(E);as=e(Bs,"LI",{});var Za=o(as);Nt=i(Za,"Go to "),dn=e(Za,"STRONG",{});var $o=o(dn);Ot=i($o,"Settings > Developer Settings > Personal Access Tokens"),$o.forEach(n),Pt=i(Za," on GitHub."),Za.forEach(n),Rt=c(Bs),C=e(Bs,"LI",{});var Bn=o(C);Ht=i(Bn,"Click "),hn=e(Bn,"STRONG",{});var Uo=o(hn);Lt=i(Uo,"Generate new token"),Uo.forEach(n),xt=i(Bn," and select the following scopes:  "),S=e(Bn,"UL",{});var Fs=o(S);Ts=e(Fs,"LI",{});var Ve=o(Ts);yn=e(Ve,"CODE",{});var jo=o(yn);Ct=i(jo,"repo"),jo.forEach(n),It=i(Ve," \u2013 Full control of private repositories"),Ve.forEach(n),$t=c(Fs),As=e(Fs,"LI",{});var so=o(As);mn=e(so,"CODE",{});var qo=o(mn);Ut=i(qo,"read:org"),qo.forEach(n),jt=i(so," \u2013 Read organization-level information"),so.forEach(n),qt=c(Fs),Ss=e(Fs,"LI",{});var no=o(Ss);bn=e(no,"CODE",{});var Do=o(bn);Dt=i(Do,"issues"),Do.forEach(n),Qt=i(no," \u2013 Read issues data"),no.forEach(n),Fs.forEach(n),Bn.forEach(n),Wt=c(Bs),_n=e(Bs,"LI",{});var Qo=o(_n);Bt=i(Qo,"Copy the token \u2013 this is your key for API access."),Qo.forEach(n),Bs.forEach(n),pa=c(s),I=e(s,"H3",{id:!0});var ao=o(I);$=e(ao,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Wo=o($);En=e(Wo,"SPAN",{class:!0}),o(En).forEach(n),Wo.forEach(n),Ft=i(ao,"Storing and Referencing the PAT Securely:"),ao.forEach(n),la=c(s),v=e(s,"UL",{});var Ms=o(v);ts=e(Ms,"LI",{});var Va=o(ts);Mt=i(Va,"In your repository, go to "),vn=e(Va,"STRONG",{});var Bo=o(vn);zt=i(Bo,"Settings > Secrets and Variables > Actions"),Bo.forEach(n),Jt=i(Va,"."),Va.forEach(n),Kt=c(Ms),G=e(Ms,"LI",{});var zs=o(G);Yt=i(zs,"Click "),wn=e(zs,"STRONG",{});var Fo=o(wn);Xt=i(Fo,"New Repository Secret"),Fo.forEach(n),Zt=i(zs," and name it "),gn=e(zs,"CODE",{});var Mo=o(gn);Vt=i(Mo,"PAT_TOKEN"),Mo.forEach(n),se=i(zs,"."),zs.forEach(n),ne=c(Ms),Tn=e(Ms,"LI",{});var zo=o(Tn);ae=i(zo,"In your GitHub Actions workflow, reference the secret like this:"),zo.forEach(n),Ms.forEach(n),ra=c(s),es=e(s,"PRE",{class:!0});var zp=o(es);zp.forEach(n),ia=c(s),ua=e(s,"HR",{}),ca=c(s),U=e(s,"H2",{id:!0});var to=o(U);j=e(to,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Jo=o(j);An=e(Jo,"SPAN",{class:!0}),o(An).forEach(n),Jo.forEach(n),te=i(to,"Breaking Down the GitHub Action Workflow"),to.forEach(n),ka=c(s),Gs=e(s,"P",{});var Ko=o(Gs);ee=i(Ko,"Now that our token is set up, let\u2019s break down the GitHub Action workflow we use to track issues. Each repository (API, game, and website) has a separate workflow, outputting to its own JSON file."),Ko.forEach(n),fa=c(s),os=e(s,"PRE",{class:!0});var Jp=o(os);Jp.forEach(n),da=c(s),q=e(s,"H3",{id:!0});var eo=o(q);D=e(eo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yo=o(D);Sn=e(Yo,"SPAN",{class:!0}),o(Sn).forEach(n),Yo.forEach(n),oe=i(eo,"Example Workflow"),eo.forEach(n),ha=c(s),ps=e(s,"PRE",{class:!0});var Kp=o(ps);Kp.forEach(n),ya=c(s),ma=e(s,"HR",{}),ba=c(s),Q=e(s,"H2",{id:!0});var oo=o(Q);W=e(oo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xo=o(W);Gn=e(Xo,"SPAN",{class:!0}),o(Gn).forEach(n),Xo.forEach(n),pe=i(oo,"Why Use GraphQL?"),oo.forEach(n),_a=c(s),B=e(s,"P",{});var st=o(B);le=i(st,"GitHub\u2019s REST API can be limiting when fetching large amounts of data. GraphQL allows us to request "),Nn=e(st,"STRONG",{});var Zo=o(Nn);re=i(Zo,"exactly the data we need"),Zo.forEach(n),ie=i(st," in a single query, reducing the number of API calls."),st.forEach(n),Ea=c(s),w=e(s,"UL",{});var Js=o(w);Ns=e(Js,"LI",{});var po=o(Ns);On=e(po,"STRONG",{});var Vo=o(On);ue=i(Vo,"Efficiency:"),Vo.forEach(n),ce=i(po," Fetches all labeled issues in one request."),po.forEach(n),ke=c(Js),g=e(Js,"LI",{});var ys=o(g);Pn=e(ys,"STRONG",{});var sp=o(Pn);fe=i(sp,"Pagination:"),sp.forEach(n),de=i(ys," Handles pagination gracefully using "),Rn=e(ys,"CODE",{});var np=o(Rn);he=i(np,"endCursor"),np.forEach(n),ye=i(ys," and "),Hn=e(ys,"CODE",{});var ap=o(Hn);me=i(ap,"hasNextPage"),ap.forEach(n),be=i(ys,"."),ys.forEach(n),_e=c(Js),Os=e(Js,"LI",{});var lo=o(Os);Ln=e(lo,"STRONG",{});var tp=o(Ln);Ee=i(tp,"Customizable:"),tp.forEach(n),ve=i(lo," We can adjust queries dynamically by passing labels or states."),lo.forEach(n),Js.forEach(n),va=c(s),Ps=e(s,"P",{});var ep=o(Ps);we=i(ep,"In the next section, I\u2019ll illustrate the difference between using GraphQL and REST, from the query to the response and how we can use that response to build a frontend component."),ep.forEach(n),wa=c(s),F=e(s,"H3",{id:!0});var ro=o(F);M=e(ro,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var op=o(M);xn=e(op,"SPAN",{class:!0}),o(xn).forEach(n),op.forEach(n),ge=i(ro,"GraphQL returning exactly what we want"),ro.forEach(n),ga=c(s),Rs=e(s,"P",{});var pp=o(Rs);Te=i(pp,"GraphQL returns only the requested fields (title, state, and labels). No unnecessary data is retrieved."),pp.forEach(n),Ta=c(s),Hs=e(s,"P",{});var lp=o(Hs);Cn=e(lp,"STRONG",{});var rp=o(Cn);Ae=i(rp,"Query:"),rp.forEach(n),lp.forEach(n),Aa=c(s),ls=e(s,"PRE",{class:!0});var Yp=o(ls);Yp.forEach(n),Sa=c(s),Ls=e(s,"P",{});var ip=o(Ls);In=e(ip,"STRONG",{});var up=o(In);Se=i(up,"Output:"),up.forEach(n),ip.forEach(n),Ga=c(s),rs=e(s,"PRE",{class:!0});var Xp=o(rs);Xp.forEach(n),Na=c(s),z=e(s,"H3",{id:!0});var io=o(z);J=e(io,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var cp=o(J);$n=e(cp,"SPAN",{class:!0}),o($n).forEach(n),cp.forEach(n),Ge=i(io,"REST returning everything"),io.forEach(n),Oa=c(s),xs=e(s,"P",{});var kp=o(xs);Ne=i(kp,"REST returns everything by default (user info, timestamps, full issue body, comments, etc.), even if you don\u2019t need it."),kp.forEach(n),Pa=c(s),Cs=e(s,"P",{});var fp=o(Cs);Un=e(fp,"STRONG",{});var dp=o(Un);Oe=i(dp,"Query:"),dp.forEach(n),fp.forEach(n),Ra=c(s),is=e(s,"PRE",{class:!0});var Zp=o(is);Zp.forEach(n),Ha=c(s),Is=e(s,"P",{});var hp=o(Is);jn=e(hp,"STRONG",{});var yp=o(jn);Pe=i(yp,"Output:"),yp.forEach(n),hp.forEach(n),La=c(s),us=e(s,"PRE",{class:!0});var Vp=o(us);Vp.forEach(n),xa=c(s),$s=e(s,"P",{});var mp=o($s);Re=i(mp,"This is why GraphQL is more efficient for fetching exactly what you need, reducing payload size and improving performance."),mp.forEach(n),Ca=c(s),Ia=e(s,"HR",{}),$a=c(s),K=e(s,"H2",{id:!0});var uo=o(K);Y=e(uo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var bp=o(Y);qn=e(bp,"SPAN",{class:!0}),o(qn).forEach(n),bp.forEach(n),He=i(uo,"Outputting to JSON for Frontend Use"),uo.forEach(n),Ua=c(s),Us=e(s,"P",{});var _p=o(Us);Le=i(_p,"Each time the action runs, it generates a JSON file that looks like this:"),_p.forEach(n),ja=c(s),cs=e(s,"PRE",{class:!0});var sl=o(cs);sl.forEach(n),qa=c(s),N=e(s,"P",{});var Fn=o(N);xe=i(Fn,"These files live in the "),Dn=e(Fn,"CODE",{});var Ep=o(Dn);Ce=i(Ep,"public"),Ep.forEach(n),Ie=i(Fn," folder and are read by frontend components to display live issue counts: "),ks=e(Fn,"A",{href:!0,rel:!0});var vp=o(ks);$e=i(vp,"https://github.com/3ee-Games/github-actions/tree/main/public"),vp.forEach(n),Fn.forEach(n),Da=c(s),js=e(s,"P",{});var wp=o(js);Ue=i(wp,"We can build a simple component that makes a call to those json files the actions created.  In this example, we\u2019ll log the response:"),wp.forEach(n),Qa=c(s),fs=e(s,"PRE",{class:!0});var nl=o(fs);nl.forEach(n),Wa=c(s),qs=e(s,"BLOCKQUOTE",{});var gp=o(qs);Qn=e(gp,"P",{});var Tp=o(Qn);je=i(Tp,"You can copy and paste this code in your browser\u2019s console and it will return a json object."),Tp.forEach(n),gp.forEach(n),Ba=c(s),Ds=e(s,"P",{});var Ap=o(Ds);qe=i(Ap,"The next step is to build out a frontend component using html and css. Below is the component that was built and used on the homepage of this website:"),Ap.forEach(n),Fa=c(s),Lp(ds.$$.fragment,s),Ma=c(s),za=e(s,"HR",{}),Ja=c(s),X=e(s,"H3",{id:!0});var co=o(X);Z=e(co,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Sp=o(Z);Wn=e(Sp,"SPAN",{class:!0}),o(Wn).forEach(n),Sp.forEach(n),De=i(co,"Final Thoughts"),co.forEach(n),Ka=c(s),Qs=e(s,"P",{});var Gp=o(Qs);Qe=i(Gp,"GitHub Actions provide a powerful way to automate issue tracking and boost transparency. By integrating GraphQL and automating with cron jobs, we can stay organized and communicate our progress with players in real-time."),Gp.forEach(n),Ya=c(s),V=e(s,"P",{});var nt=o(V);We=i(nt,"Ready to set up your own tracker? "),hs=e(nt,"A",{href:!0,rel:!0});var Np=o(hs);Be=i(Np,"Fork our repo"),Np.forEach(n),Fe=i(nt," and start automating your project."),nt.forEach(n),this.h()},h(){k(on,"class","icon icon-link"),k(P,"aria-hidden","true"),k(P,"tabindex","-1"),k(P,"href","#what-are-github-actions"),k(O,"id","what-are-github-actions"),k(kn,"class","icon icon-link"),k(H,"aria-hidden","true"),k(H,"tabindex","-1"),k(H,"href","#setting-up-github-personal-access-tokens-pat"),k(R,"id","setting-up-github-personal-access-tokens-pat"),k(fn,"class","icon icon-link"),k(x,"aria-hidden","true"),k(x,"tabindex","-1"),k(x,"href","#steps-to-generate-a-pat"),k(L,"id","steps-to-generate-a-pat"),k(En,"class","icon icon-link"),k($,"aria-hidden","true"),k($,"tabindex","-1"),k($,"href","#storing-and-referencing-the-pat-securely"),k(I,"id","storing-and-referencing-the-pat-securely"),k(es,"class","language-yaml"),k(An,"class","icon icon-link"),k(j,"aria-hidden","true"),k(j,"tabindex","-1"),k(j,"href","#breaking-down-the-github-action-workflow"),k(U,"id","breaking-down-the-github-action-workflow"),k(os,"class","language-undefined"),k(Sn,"class","icon icon-link"),k(D,"aria-hidden","true"),k(D,"tabindex","-1"),k(D,"href","#example-workflow"),k(q,"id","example-workflow"),k(ps,"class","language-yaml"),k(Gn,"class","icon icon-link"),k(W,"aria-hidden","true"),k(W,"tabindex","-1"),k(W,"href","#why-use-graphql"),k(Q,"id","why-use-graphql"),k(xn,"class","icon icon-link"),k(M,"aria-hidden","true"),k(M,"tabindex","-1"),k(M,"href","#graphql-returning-exactly-what-we-want"),k(F,"id","graphql-returning-exactly-what-we-want"),k(ls,"class","language-graphql"),k(rs,"class","language-json"),k($n,"class","icon icon-link"),k(J,"aria-hidden","true"),k(J,"tabindex","-1"),k(J,"href","#rest-returning-everything"),k(z,"id","rest-returning-everything"),k(is,"class","language-bash"),k(us,"class","language-json"),k(qn,"class","icon icon-link"),k(Y,"aria-hidden","true"),k(Y,"tabindex","-1"),k(Y,"href","#outputting-to-json-for-frontend-use"),k(K,"id","outputting-to-json-for-frontend-use"),k(cs,"class","language-json"),k(ks,"href","https://github.com/3ee-Games/github-actions/tree/main/public"),k(ks,"rel","nofollow"),k(fs,"class","language-javascript"),k(Wn,"class","icon icon-link"),k(Z,"aria-hidden","true"),k(Z,"tabindex","-1"),k(Z,"href","#final-thoughts"),k(X,"id","final-thoughts"),k(hs,"href","https://github.com/3ee-Games/github-actions"),k(hs,"rel","nofollow")},m(s,p){l(s,f,p),a(f,b),a(f,m),a(m,ss),a(f,d),l(s,y,p),l(s,A,p),a(A,at),l(s,Mn,p),l(s,h,p),a(h,Ks),a(Ks,Ys),a(Ys,tt),a(h,et),a(h,Xs),a(Xs,Zs),a(Zs,ot),a(h,pt),a(h,Vs),a(Vs,sn),a(sn,lt),a(h,rt),a(h,nn),a(nn,an),a(an,it),a(h,ut),a(h,tn),a(tn,en),a(en,ct),l(s,zn,p),l(s,Jn,p),l(s,Kn,p),l(s,O,p),a(O,P),a(P,on),a(O,kt),l(s,Yn,p),l(s,bs,p),a(bs,ft),l(s,Xn,p),l(s,_s,p),a(_s,pn),a(pn,dt),l(s,Zn,p),l(s,_,p),a(_,Es),a(Es,ln),a(ln,ht),a(Es,yt),a(_,mt),a(_,vs),a(vs,rn),a(rn,bt),a(vs,_t),a(_,Et),a(_,ws),a(ws,un),a(un,vt),a(ws,wt),l(s,Vn,p),l(s,ns,p),a(ns,cn),a(cn,gt),a(ns,Tt),l(s,sa,p),l(s,na,p),l(s,aa,p),l(s,R,p),a(R,H),a(H,kn),a(R,At),l(s,ta,p),l(s,gs,p),a(gs,St),l(s,ea,p),l(s,L,p),a(L,x),a(x,fn),a(L,Gt),l(s,oa,p),l(s,E,p),a(E,as),a(as,Nt),a(as,dn),a(dn,Ot),a(as,Pt),a(E,Rt),a(E,C),a(C,Ht),a(C,hn),a(hn,Lt),a(C,xt),a(C,S),a(S,Ts),a(Ts,yn),a(yn,Ct),a(Ts,It),a(S,$t),a(S,As),a(As,mn),a(mn,Ut),a(As,jt),a(S,qt),a(S,Ss),a(Ss,bn),a(bn,Dt),a(Ss,Qt),a(E,Wt),a(E,_n),a(_n,Bt),l(s,pa,p),l(s,I,p),a(I,$),a($,En),a(I,Ft),l(s,la,p),l(s,v,p),a(v,ts),a(ts,Mt),a(ts,vn),a(vn,zt),a(ts,Jt),a(v,Kt),a(v,G),a(G,Yt),a(G,wn),a(wn,Xt),a(G,Zt),a(G,gn),a(gn,Vt),a(G,se),a(v,ne),a(v,Tn),a(Tn,ae),l(s,ra,p),l(s,es,p),es.innerHTML=Up,l(s,ia,p),l(s,ua,p),l(s,ca,p),l(s,U,p),a(U,j),a(j,An),a(U,te),l(s,ka,p),l(s,Gs,p),a(Gs,ee),l(s,fa,p),l(s,os,p),os.innerHTML=jp,l(s,da,p),l(s,q,p),a(q,D),a(D,Sn),a(q,oe),l(s,ha,p),l(s,ps,p),ps.innerHTML=qp,l(s,ya,p),l(s,ma,p),l(s,ba,p),l(s,Q,p),a(Q,W),a(W,Gn),a(Q,pe),l(s,_a,p),l(s,B,p),a(B,le),a(B,Nn),a(Nn,re),a(B,ie),l(s,Ea,p),l(s,w,p),a(w,Ns),a(Ns,On),a(On,ue),a(Ns,ce),a(w,ke),a(w,g),a(g,Pn),a(Pn,fe),a(g,de),a(g,Rn),a(Rn,he),a(g,ye),a(g,Hn),a(Hn,me),a(g,be),a(w,_e),a(w,Os),a(Os,Ln),a(Ln,Ee),a(Os,ve),l(s,va,p),l(s,Ps,p),a(Ps,we),l(s,wa,p),l(s,F,p),a(F,M),a(M,xn),a(F,ge),l(s,ga,p),l(s,Rs,p),a(Rs,Te),l(s,Ta,p),l(s,Hs,p),a(Hs,Cn),a(Cn,Ae),l(s,Aa,p),l(s,ls,p),ls.innerHTML=Dp,l(s,Sa,p),l(s,Ls,p),a(Ls,In),a(In,Se),l(s,Ga,p),l(s,rs,p),rs.innerHTML=Qp,l(s,Na,p),l(s,z,p),a(z,J),a(J,$n),a(z,Ge),l(s,Oa,p),l(s,xs,p),a(xs,Ne),l(s,Pa,p),l(s,Cs,p),a(Cs,Un),a(Un,Oe),l(s,Ra,p),l(s,is,p),is.innerHTML=Wp,l(s,Ha,p),l(s,Is,p),a(Is,jn),a(jn,Pe),l(s,La,p),l(s,us,p),us.innerHTML=Bp,l(s,xa,p),l(s,$s,p),a($s,Re),l(s,Ca,p),l(s,Ia,p),l(s,$a,p),l(s,K,p),a(K,Y),a(Y,qn),a(K,He),l(s,Ua,p),l(s,Us,p),a(Us,Le),l(s,ja,p),l(s,cs,p),cs.innerHTML=Fp,l(s,qa,p),l(s,N,p),a(N,xe),a(N,Dn),a(Dn,Ce),a(N,Ie),a(N,ks),a(ks,$e),l(s,Da,p),l(s,js,p),a(js,Ue),l(s,Qa,p),l(s,fs,p),fs.innerHTML=Mp,l(s,Wa,p),l(s,qs,p),a(qs,Qn),a(Qn,je),l(s,Ba,p),l(s,Ds,p),a(Ds,qe),l(s,Fa,p),xp(ds,s,p),l(s,Ma,p),l(s,za,p),l(s,Ja,p),l(s,X,p),a(X,Z),a(Z,Wn),a(X,De),l(s,Ka,p),l(s,Qs,p),a(Qs,Qe),l(s,Ya,p),l(s,V,p),a(V,We),a(V,hs),a(hs,Be),a(V,Fe),Xa=!0},p:pl,i(s){Xa||(Cp(ds.$$.fragment,s),Xa=!0)},o(s){Ip(ds.$$.fragment,s),Xa=!1},d(s){s&&n(f),s&&n(y),s&&n(A),s&&n(Mn),s&&n(h),s&&n(zn),s&&n(Jn),s&&n(Kn),s&&n(O),s&&n(Yn),s&&n(bs),s&&n(Xn),s&&n(_s),s&&n(Zn),s&&n(_),s&&n(Vn),s&&n(ns),s&&n(sa),s&&n(na),s&&n(aa),s&&n(R),s&&n(ta),s&&n(gs),s&&n(ea),s&&n(L),s&&n(oa),s&&n(E),s&&n(pa),s&&n(I),s&&n(la),s&&n(v),s&&n(ra),s&&n(es),s&&n(ia),s&&n(ua),s&&n(ca),s&&n(U),s&&n(ka),s&&n(Gs),s&&n(fa),s&&n(os),s&&n(da),s&&n(q),s&&n(ha),s&&n(ps),s&&n(ya),s&&n(ma),s&&n(ba),s&&n(Q),s&&n(_a),s&&n(B),s&&n(Ea),s&&n(w),s&&n(va),s&&n(Ps),s&&n(wa),s&&n(F),s&&n(ga),s&&n(Rs),s&&n(Ta),s&&n(Hs),s&&n(Aa),s&&n(ls),s&&n(Sa),s&&n(Ls),s&&n(Ga),s&&n(rs),s&&n(Na),s&&n(z),s&&n(Oa),s&&n(xs),s&&n(Pa),s&&n(Cs),s&&n(Ra),s&&n(is),s&&n(Ha),s&&n(Is),s&&n(La),s&&n(us),s&&n(xa),s&&n($s),s&&n(Ca),s&&n(Ia),s&&n($a),s&&n(K),s&&n(Ua),s&&n(Us),s&&n(ja),s&&n(cs),s&&n(qa),s&&n(N),s&&n(Da),s&&n(js),s&&n(Qa),s&&n(fs),s&&n(Wa),s&&n(qs),s&&n(Ba),s&&n(Ds),s&&n(Fa),$p(ds,s),s&&n(Ma),s&&n(za),s&&n(Ja),s&&n(X),s&&n(Ka),s&&n(Qs),s&&n(Ya),s&&n(V)}}}function ul(ms){let f,b;const m=[ms[0],Rp];let ss={$$slots:{default:[il]},$$scope:{ctx:ms}};for(let d=0;d<m.length;d+=1)ss=ko(ss,m[d]);return f=new ll({props:ss}),{c(){Hp(f.$$.fragment)},l(d){Lp(f.$$.fragment,d)},m(d,y){xp(f,d,y),b=!0},p(d,[y]){const A=y&1?ol(m,[y&1&&Op(d[0]),y&0&&Op(Rp)]):{};y&2&&(A.$$scope={dirty:y,ctx:d}),f.$set(A)},i(d){b||(Cp(f.$$.fragment,d),b=!0)},o(d){Ip(f.$$.fragment,d),b=!1},d(d){$p(f,d)}}}const Rp={title:"Github Actions 101",date:"2025-01-06",modifiedDate:"2025-01-06",categories:["github","automation","web development"],svg:"Api",seoImage:"https://res.cloudinary.com/dxgyuy0iu/image/upload/v1736376656/blog/ydtnowkeirmxxcyjoyr5.png",shortDescription:"Learn how 3ee Games uses Github Actions and GraphQL to automate issue tracking, enhancing transparency in game development.",keywords:["github","issue tracker","transparency","web development","actions","automation"],author:"Ryan Sadwick"};function cl(ms,f,b){return ms.$$set=m=>{b(0,f=ko(ko({},f),Pp(m)))},f=Pp(f),[f]}class bl extends al{constructor(f){super(),tl(this,f,cl,ul,el,{})}}export{bl as default,Rp as metadata};
